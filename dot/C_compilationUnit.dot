digraph G {
            graph [size="10,10"];      
            graph [dpi=800]; // 设置分辨率为300 DPI
            rankdir=LR; // 从左到右排列
            node [style=filled];
            node [shape=box]; // 节点形状为方框
            compilationUnit -> translationUnit [style=dashed];
translationUnit -> EOF [penwidth=3.0];
translationUnit -> externalDeclaration [style=dashed];
externalDeclaration -> functionDefinition [style=dashed];
functionDefinition -> declarationSpecifiers [style=dashed];
declarationSpecifiers -> declarator [penwidth=3.0];
declarator -> declarationList [penwidth=3.0];
declarationList -> compoundStatement [penwidth=3.0];
compoundStatement -> "{" [style=dashed];
"{" -> blockItemList [penwidth=3.0];
blockItemList -> "}" [penwidth=3.0];
blockItemList -> blockItem [style=dashed];
declarationList -> declaration [style=dashed];
declaration -> declarationSpecifiers [style=dashed];
declarationSpecifiers -> initDeclaratorList [penwidth=3.0];
initDeclaratorList -> ";" [penwidth=3.0];
declaration -> staticAssertDeclaration [style=dashed];
declarator -> pointer [style=dashed];
pointer -> directDeclarator [penwidth=3.0];
directDeclarator -> gccDeclaratorExtension [penwidth=3.0];
gccDeclaratorExtension -> "__asm" [style=dashed];
"__asm" -> "(" [penwidth=3.0];
"(" -> StringLiteral [penwidth=3.0];
StringLiteral -> ")" [penwidth=3.0];
gccDeclaratorExtension -> gccAttributeSpecifier [style=dashed];
directDeclarator -> "[" [penwidth=3.0];
"[" -> typeQualifierList [penwidth=3.0];
typeQualifierList -> assignmentExpression [penwidth=3.0];
assignmentExpression -> "]" [penwidth=3.0];
assignmentExpression -> "]" [penwidth=3.0];
assignmentExpression -> "]" [penwidth=3.0];
typeQualifierList -> assignmentExpression [penwidth=3.0];
typeQualifierList -> "static" [penwidth=3.0];
"static" -> typeQualifierList [penwidth=3.0];
"static" -> assignmentExpression [penwidth=3.0];
typeQualifierList -> "*" [penwidth=3.0];
"*" -> "]" [penwidth=3.0];
"[" -> "static" [penwidth=3.0];
"[" -> typeQualifierList [penwidth=3.0];
"[" -> typeQualifierList [penwidth=3.0];
directDeclarator -> "[" [penwidth=3.0];
directDeclarator -> "[" [penwidth=3.0];
directDeclarator -> "[" [penwidth=3.0];
directDeclarator -> "(" [style=dashed];
"(" -> declarator [penwidth=3.0];
declarator -> ")" [penwidth=3.0];
declarator -> ")" [penwidth=3.0];
"(" -> parameterTypeList [penwidth=3.0];
parameterTypeList -> ")" [penwidth=3.0];
"(" -> identifierList [penwidth=3.0];
identifierList -> ")" [penwidth=3.0];
"(" -> vcSpecificModifer [penwidth=3.0];
vcSpecificModifer -> Identifier [penwidth=3.0];
Identifier -> ":" [penwidth=3.0];
":" -> DigitSequence [penwidth=3.0];
vcSpecificModifer -> declarator [penwidth=3.0];
directDeclarator -> "(" [style=dashed];
directDeclarator -> Identifier [style=dashed];
directDeclarator -> "(" [style=dashed];
directDeclarator -> directDeclarator [style=dashed];
directDeclarator -> directDeclarator [style=dashed];
directDeclarator -> directDeclarator [style=dashed];
directDeclarator -> directDeclarator [style=dashed];
directDeclarator -> directDeclarator [style=dashed];
directDeclarator -> directDeclarator [style=dashed];
directDeclarator -> Identifier [style=dashed];
directDeclarator -> vcSpecificModifer [style=dashed];
directDeclarator -> "(" [style=dashed];
pointer -> "*" [style=dashed];
"*" -> typeQualifierList [penwidth=3.0];
pointer -> "^" [style=dashed];
"^" -> typeQualifierList [penwidth=3.0];
declarationSpecifiers -> declarationSpecifier [style=dashed];
declarationSpecifier -> storageClassSpecifier [style=dashed];
declarationSpecifier -> typeSpecifier [style=dashed];
declarationSpecifier -> typeQualifier [style=dashed];
declarationSpecifier -> functionSpecifier [style=dashed];
declarationSpecifier -> alignmentSpecifier [style=dashed];
externalDeclaration -> declaration [style=dashed];
externalDeclaration -> ";" [style=dashed];
compilationUnit [fillcolor="#aa6666"];
}