digraph G {
            graph [size="10,10"];      
            graph [dpi=800]; // 设置分辨率为300 DPI
            rankdir=LR; // 从左到右排列
            node [style=filled];
            node [shape=box]; // 节点形状为方框
            block -> LBRACE [style=dashed];
LBRACE -> blockStatementsOpt [penwidth=3.0];
blockStatementsOpt -> RBRACE [penwidth=3.0];
blockStatementsOpt -> blockStatements [style=dashed];
blockStatements -> blockStatement [style=dashed];
blockStatement -> blockStatement [penwidth=3.0];
blockStatement -> localVariableDeclaration [style=dashed];
localVariableDeclaration -> variableDeclaration [style=dashed];
blockStatement -> statement [style=dashed];
statement -> block [style=dashed];
statement -> conditionalStatement [style=dashed];
statement -> loopStatement [style=dashed];
statement -> tryCatchStatement [style=dashed];
statement -> SYNCHRONIZED [style=dashed];
SYNCHRONIZED -> expressionInPar [penwidth=3.0];
expressionInPar -> block [penwidth=3.0];
statement -> RETURN [style=dashed];
RETURN -> expression [penwidth=3.0];
statement -> THROW [style=dashed];
THROW -> expression [penwidth=3.0];
statement -> breakStatement [style=dashed];
statement -> continueStatement [style=dashed];
statement -> yieldStatement [style=dashed];
statement -> identifier [style=dashed];
identifier -> COLON [penwidth=3.0];
COLON -> statement [penwidth=3.0];
statement -> assertStatement [style=dashed];
statement -> localVariableDeclaration [style=dashed];
statement -> statementExpression [style=dashed];
statement -> None [style=dashed];
blockStatement -> localVariableDeclaration [style=dashed];
localVariableDeclaration -> variableDeclaration [style=dashed];
variableDeclaration -> modifiers [style=dashed];
modifiers -> type [penwidth=3.0];
type -> variableDeclarators [penwidth=3.0];
type -> variableDeclarators [penwidth=3.0];
modifiers -> typeNamePairs [penwidth=3.0];
typeNamePairs -> ASSIGN [penwidth=3.0];
ASSIGN -> variableInitializer [penwidth=3.0];
variableDeclaration -> type [style=dashed];
blockStatement -> statement [style=dashed];
statement -> block [style=dashed];
block -> LBRACE [style=dashed];
statement -> conditionalStatement [style=dashed];
conditionalStatement -> ifElseStatement [style=dashed];
conditionalStatement -> switchStatement [style=dashed];
statement -> loopStatement [style=dashed];
loopStatement -> FOR [style=dashed];
FOR -> LPAREN [penwidth=3.0];
LPAREN -> forControl [penwidth=3.0];
forControl -> rparen [penwidth=3.0];
rparen -> statement [penwidth=3.0];
loopStatement -> WHILE [style=dashed];
WHILE -> expressionInPar [penwidth=3.0];
WHILE -> expressionInPar [penwidth=3.0];
loopStatement -> DO [style=dashed];
DO -> statement [penwidth=3.0];
statement -> tryCatchStatement [style=dashed];
tryCatchStatement -> TRY [style=dashed];
TRY -> resources [penwidth=3.0];
resources -> block [penwidth=3.0];
statement -> SYNCHRONIZED [style=dashed];
statement -> RETURN [style=dashed];
statement -> THROW [style=dashed];
statement -> breakStatement [style=dashed];
breakStatement -> BREAK [style=dashed];
BREAK -> identifier [penwidth=3.0];
statement -> continueStatement [style=dashed];
continueStatement -> CONTINUE [style=dashed];
CONTINUE -> identifier [penwidth=3.0];
statement -> yieldStatement [style=dashed];
yieldStatement -> YIELD [style=dashed];
YIELD -> expression [penwidth=3.0];
statement -> identifier [style=dashed];
identifier -> Identifier [style=dashed];
identifier -> CapitalizedIdentifier [style=dashed];
identifier -> AS [style=dashed];
identifier -> IN [style=dashed];
identifier -> PERMITS [style=dashed];
identifier -> RECORD [style=dashed];
identifier -> SEALED [style=dashed];
identifier -> TRAIT [style=dashed];
identifier -> VAR [style=dashed];
identifier -> YIELD [style=dashed];
statement -> assertStatement [style=dashed];
assertStatement -> ASSERT [style=dashed];
ASSERT -> expression [penwidth=3.0];
statement -> localVariableDeclaration [style=dashed];
localVariableDeclaration -> variableDeclaration [style=dashed];
statement -> statementExpression [style=dashed];
statementExpression -> commandExpression [style=dashed];
statement -> None [style=dashed];
block [fillcolor="#aa6666"];
}